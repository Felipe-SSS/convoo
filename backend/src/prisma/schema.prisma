generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  id          Int     @id @default(autoincrement())
  name        String  @unique(map: "name") @db.VarChar(45)
  description String? @db.VarChar(255)
  users       users[]
}

model user_profiles {
  user_id    BigInt   @id
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  birthdate  DateTime @db.Date
  country    String?  @db.VarChar(255)
  languages  Json
  interests  Json
  intent     String   @db.VarChar(255)
  nickname   String   @db.VarChar(50)
  bio        String?  @db.Text
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_profiles_ibfk_1")
}

model users {
  id                      BigInt                    @id @default(autoincrement())
  username                String                    @unique(map: "username") @db.VarChar(45)
  email                   String                    @unique(map: "email") @db.VarChar(255)
  password                String                    @db.VarChar(255)
  is_active               Boolean                   @default(true)
  is_verified             Boolean                   @default(false)
  verification_token      String?                   @db.VarChar(100)
  verification_sent_at    DateTime?                 @db.DateTime(0)
  reset_password_token    String?                   @db.VarChar(100)
  reset_password_sent_at  DateTime?                 @db.DateTime(0)
  role_id                 Int                       @default(2)
  created_at              DateTime                  @default(now()) @db.DateTime(0)
  updated_at              DateTime                  @default(now()) @db.DateTime(0)
  last_login              DateTime?                 @db.DateTime(0)
  user_profiles           user_profiles?
  user_stats              user_stats?
  roles                   roles                     @relation(fields: [role_id], references: [id], onUpdate: NoAction, map: "users_ibfk_1")
  video_call_participants video_call_participants[]

  @@index([role_id], map: "role_id")
  
}

model video_call_participants {
  user_id     BigInt
  call_id     BigInt
  joined_at   DateTime?   @db.Timestamp(0)
  left_at     DateTime?   @db.Timestamp(0)
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_call_participants_ibfk_1")
  video_calls video_calls @relation(fields: [call_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_call_participants_ibfk_2")

  @@id([user_id, call_id])
  @@index([call_id], map: "call_id")
}

model video_calls {
  id                      BigInt                    @id @default(autoincrement())
  started_at              DateTime                  @db.Timestamp(0)
  ended_at                DateTime?                 @db.Timestamp(0)
  duration_seconds        Int?
  recording_url           String?                   @db.Text
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  video_call_participants video_call_participants[]
}

model user_stats {
  user_id           BigInt @id
  min_talked        Int?   @default(0)
  practice_sequence Int?   @default(0)
  users             users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_stats_ibfk_1")
}